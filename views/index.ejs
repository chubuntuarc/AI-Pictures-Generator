<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Generation</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
            line-height: 1.6;
            padding: 30px;
            max-width: 700px;
            margin: 40px auto;
            background-color: #f8f9fa;
            color: #333;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        h1 {
            color: #212529;
            border-bottom: 1px solid #dee2e6;
            padding-bottom: 10px;
            margin-bottom: 25px;
        }
        form div {
            margin-bottom: 20px; /* Add space below the file input */
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #495057;
        }
        input[type="file"] {
            display: block;
            padding: 10px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            background-color: #fff;
            width: calc(100% - 22px); /* Adjust width considering padding and border */
        }
        button, input[type="submit"] {
            padding: 12px 20px;
            cursor: pointer;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1em;
            transition: background-color 0.2s ease-in-out;
            margin-right: 10px; /* Space between buttons */
        }
        button:hover, input[type="submit"]:hover {
            background-color: #0056b3;
        }
        button:disabled {
            background-color: #6c757d; /* Grey out disabled buttons */
            cursor: not-allowed;
        }
        .error {
            color: #dc3545; /* Bootstrap danger color */
            background-color: #f8d7da; /* Light red background */
            border: 1px solid #f5c6cb; /* Reddish border */
            padding: 15px;
            margin-top: 20px; /* Add space above error */
            margin-bottom: 20px;
            border-radius: 4px;
            font-weight: bold;
        }
        .sheet-link {
            margin-top: 20px;
            font-size: 0.9em;
            color: #6c757d;
        }
        .loader {
            border: 4px solid #e9ecef; /* Lighter grey */
            border-top: 4px solid #007bff; /* Blue */
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            display: none; /* Hidden by default */
            margin-left: 10px;
            vertical-align: middle;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .info {
            background-color: #e9ecef; /* Lighter grey background */
            color: #495057; /* Darker grey text */
            padding: 15px;
            margin-bottom: 25px;
            border-radius: 4px;
            border-left: 4px solid #007bff; /* Blue left border for emphasis */
            font-size: 0.95em;
        }
        .prompt-list {
            margin-top: 30px;
            padding: 15px;
            background-color: #fff;
            border: 1px solid #dee2e6;
            border-radius: 4px;
        }
        .prompt-list h2 {
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 1.2em;
            color: #495057;
        }
        .prompt-list ul {
            list-style: disc;
            padding-left: 20px;
            margin-bottom: 0;
            max-height: 300px; /* Limit height and make scrollable */
            overflow-y: auto; /* Add scrollbar if needed */
        }
        .prompt-list li {
            margin-bottom: 8px;
            color: #333;
        }
        /* --- Hide elements initially --- */
        #generateImagesBtn, #promptListContainer, #errorMessage {
            display: none;
        }
    </style>
</head>
<body>
    <h1>Generate Images from Prompts</h1>

    <% if (error) { %>
        <div class="error">
            <strong>Error:</strong> <%= error %>
        </div>
    <% } %>

    <div class="info">
        Upload a CSV file containing your prompts. 
        <br>
        The application expects the prompts to be in column <%= promptColumnIndex %> (column index <%= promptColumnIndex - 1 %>).
        You can configure the expected column index using the PROMPT_CSV_COLUMN_INDEX environment variable (0-based).
    </div>

    <%# Form for uploading the file - no action/method, handled by JS %>
    <form id="uploadForm">
        <div>
            <label for="promptFile">Select Prompt CSV File:</label>
            <input type="file" id="promptFile" name="promptFile" accept=".csv" required>
        </div>
        <button type="button" id="showPromptsBtn">Show Prompts</button>
        <span class="loader" id="loaderShow"></span>
    </form>

    <%# Placeholder for error messages from JS actions %>
    <div id="errorMessage" class="error"></div>

    <%# Container for the prompt list, initially hidden %>
    <div id="promptListContainer">
         <%# Content will be added by JS %>
    </div>

    <%# Button to trigger generation, initially hidden %>
    <form action="/generate-images" method="POST" id="generateForm" style="margin-top: 20px;">
         <%# Hidden input will be added by JS %>
         <button type="submit" id="generateImagesBtn">Generate Images (<span id="promptCount">0</span>)</button>
         <span class="loader" id="loaderGenerate"></span>
    </form>

    <script>
        // --- DOM Elements ---
        const uploadForm = document.getElementById('uploadForm');
        const promptFileInput = document.getElementById('promptFile');
        const showPromptsBtn = document.getElementById('showPromptsBtn');
        const generateImagesBtn = document.getElementById('generateImagesBtn');
        const generateForm = document.getElementById('generateForm'); // Get the form itself
        const promptListContainer = document.getElementById('promptListContainer');
        const errorMessageDiv = document.getElementById('errorMessage');
        const loaderShow = document.getElementById('loaderShow');
        const loaderGenerate = document.getElementById('loaderGenerate');
        const promptCountSpan = document.getElementById('promptCount');

        // --- State ---
        let loadedPrompts = []; // To store prompts after loading

        // --- Event Listener for "Show Prompts" ---
        showPromptsBtn.addEventListener('click', async () => {
            const file = promptFileInput.files[0];
            if (!file) {
                displayError("Please select a CSV file first.");
                return;
            }

            // Reset UI
            clearError();
            promptListContainer.style.display = 'none';
            promptListContainer.innerHTML = ''; // Clear previous list
            generateImagesBtn.style.display = 'none';
            showPromptsBtn.disabled = true;
            loaderShow.style.display = 'inline-block';
            loadedPrompts = []; // Clear previous prompts

            const formData = new FormData();
            formData.append('promptFile', file);

            try {
                const response = await fetch('/load-prompts-from-file', {
                    method: 'POST',
                    body: formData,
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    loadedPrompts = data.prompts; // Store prompts
                    displayPrompts(loadedPrompts); // Show prompts on page
                    promptCountSpan.textContent = loadedPrompts.length; // Update count on button
                    generateImagesBtn.style.display = 'inline-block'; // Show generate button
                    // Optionally hide or keep the "Show Prompts" button visible
                    // showPromptsBtn.style.display = 'none';
                } else {
                    displayError(data.error || 'Failed to load prompts from file.');
                }
            } catch (error) {
                console.error('Fetch error:', error);
                displayError('Could not connect to the server or parse the response.');
            } finally {
                loaderShow.style.display = 'none';
                showPromptsBtn.disabled = false; // Re-enable button
            }
        });

        // --- Event Listener for "Generate Images" Form Submission ---
        generateForm.addEventListener('submit', (event) => {
            // Prevent default form submission ONLY if we handle it fully with JS
            // For now, let the form submit normally, but add the prompts first

            // Clear previous hidden inputs if any
            const existingHiddenInput = generateForm.querySelector('input[name="promptsJson"]');
            if (existingHiddenInput) {
                generateForm.removeChild(existingHiddenInput);
            }

            if (loadedPrompts.length === 0) {
                 event.preventDefault(); // Stop submission if no prompts
                 displayError("No prompts loaded to generate images for.");
                 return;
            }

            // Add loaded prompts as a hidden input field (JSON string)
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'promptsJson'; // Backend will look for this
            hiddenInput.value = JSON.stringify(loadedPrompts);
            generateForm.appendChild(hiddenInput);

            // Show loader and disable button before submitting
            generateImagesBtn.disabled = true;
            loaderGenerate.style.display = 'inline-block';

            // Allow the form to submit naturally to POST /generate-images
        });


        // --- Helper Functions ---
        function displayPrompts(prompts) {
            promptListContainer.innerHTML = ''; // Clear previous content
            if (prompts && prompts.length > 0) {
                const listHtml = `
                    <div class="prompt-list">
                        <h2>Loaded Prompts (${prompts.length}):</h2>
                        <ul>
                            ${prompts.map(p => `<li>${escapeHtml(p)}</li>`).join('')}
                        </ul>
                    </div>`;
                promptListContainer.innerHTML = listHtml;
                promptListContainer.style.display = 'block';
            } else {
                 // Should be caught by server, but good practice
                 displayError("No prompts found in the file.");
            }
        }

        function displayError(message) {
            errorMessageDiv.textContent = message;
            errorMessageDiv.style.display = 'block';
        }

        function clearError() {
            errorMessageDiv.textContent = '';
            errorMessageDiv.style.display = 'none';
        }

        // Basic HTML escaping
        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                 .replace(/&/g, "&amp;")
                 .replace(/</g, "&lt;")
                 .replace(/>/g, "&gt;")
                 .replace(/"/g, "&quot;")
                 .replace(/'/g, "&#039;");
        }

    </script>

</body>
</html>
